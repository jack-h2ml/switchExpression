"use strict";var _class,_exitReturn,_break,_conditions,_Exit;require("core-js/modules/es.error.cause.js"),Object.defineProperty(exports,"__esModule",{value:!0}),exports.switchExp=void 0;function _classPrivateFieldInitSpec(a,b,c){_checkPrivateRedeclaration(a,b),b.set(a,c)}function _checkPrivateRedeclaration(a,b){if(b.has(a))throw new TypeError("Cannot initialize the same private elements twice on an object")}function _defineProperty(a,b,c){return b=_toPropertyKey(b),b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c,a}function _toPropertyKey(a){var b=_toPrimitive(a,"string");return"symbol"==typeof b?b:b+""}function _toPrimitive(a,b){if("object"!=typeof a||null===a)return a;var c=a[Symbol.toPrimitive];if(c!==void 0){var d=c.call(a,b||"default");if("object"!=typeof d)return d;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===b?String:Number)(a)}function _classPrivateFieldSet(a,b,c){var d=_classExtractFieldDescriptor(a,b,"set");return _classApplyDescriptorSet(a,d,c),c}function _classApplyDescriptorSet(a,b,c){if(b.set)b.set.call(a,c);else{if(!b.writable)throw new TypeError("attempted to set read only private field");b.value=c}}function _classPrivateFieldGet(a,b){var c=_classExtractFieldDescriptor(a,b,"get");return _classApplyDescriptorGet(a,c)}function _classExtractFieldDescriptor(a,b,c){if(!b.has(a))throw new TypeError("attempted to "+c+" private field on non-instance");return b.get(a)}function _classStaticPrivateFieldSpecGet(a,b,c){return _classCheckPrivateStaticAccess(a,b),_classCheckPrivateStaticFieldDescriptor(c,"get"),_classApplyDescriptorGet(a,c)}function _classCheckPrivateStaticFieldDescriptor(a,b){if(a===void 0)throw new TypeError("attempted to "+b+" private static field before its declaration")}function _classCheckPrivateStaticAccess(a,b){if(a!==b)throw new TypeError("Private static access of wrong provenance")}function _classApplyDescriptorGet(a,b){return b.get?b.get.call(a):b.value}const SwitchExp=(_exitReturn=new WeakMap,_break=new WeakMap,_conditions=new WeakMap,_class=class{constructor(a){_classPrivateFieldInitSpec(this,_exitReturn,{writable:!0,value:void 0}),_classPrivateFieldInitSpec(this,_break,{writable:!0,value:a=>(a.splice(1),_classPrivateFieldGet(this,_exitReturn).value)}),_defineProperty(this,"eval",a=>[..._classPrivateFieldGet(this,_conditions)].reduce((b,c,d,e)=>{let[f,g]=c;return[...b,(f instanceof Function&&!0===f(a)||a===f||f&&void 0===g&&(g=void 0))&&(g instanceof Function?_classPrivateFieldSet(this,_exitReturn,g(SwitchExp.exitCallback))instanceof _classStaticPrivateFieldSpecGet(SwitchExp,_class,_Exit)?_classPrivateFieldGet(this,_break).call(this,e):_classPrivateFieldGet(this,_exitReturn):g)]},[])),_classPrivateFieldInitSpec(this,_conditions,{writable:!0,value:void 0}),_classPrivateFieldSet(this,_conditions,a)}},_Exit={writable:!0,value:class{constructor(a){return this.value=a,this}}},_defineProperty(_class,"exitCallback",a=>new(_classStaticPrivateFieldSpecGet(SwitchExp,_class,_Exit))(a)),_class),switchExp=a=>new SwitchExp(a);exports.switchExp=switchExp;
